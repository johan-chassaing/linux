#!/usr/bin/python
# -*- coding: utf-8 -*-

# Checks supervisord processes status
# 

# Copyright Johan Chassaing 2015
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 


try:
    import sys
    import supervisor.supervisorctl
except ImportError:
    print "CRITICAL | Modules importation error"    
    sys.exit(2)

 
ctl=supervisor.supervisorctl
options = ctl.ClientOptions()
options.realize(None)
c = ctl.Controller(options)

nb=0
processes_error = []
processes_warning = []
processes_ok = []
processes_unkown = []

supervisor_states = {
    'BACKOFF':  'CRITICAL',
    'EXITED':   'CRITICAL',
    'FATAL':    'CRITICAL',
    'UNKNOWN':  'CRITICAL',
    'STARTING': 'WARNING',
    'STOPPING': 'WARNING',
    'RUNNING':  'OK',
    'STOPPED':  'OK'
}

for current_process in c.get_supervisor().getAllProcessInfo():
    nb += 1
    current_state = supervisor_states[ current_process['statename'] ]
    if current_state == 'CRITICAL':
        processes_error.append( current_process['name'] )
    elif current_state == 'WARNING':
        processes_warning.append( current_process['name'] )
    elif current_state == 'OK':
        processes_ok.append( current_process['name'] )
    else :
        processes_unkown.append( current_process['name'] )
  
if processes_error :
    print "CRITICAL | %d/%d - %s" %(len(processes_error),nb,','.join(processes_error) )
    sys.exit(2)
elif processes_warning:
    print "WARNING | %d/%d - %s" %(len(processes_warning),nb,','.join(processes_warning) )
    sys.exit(1)
elif processes_unkown :
    print "UNKOWN | %d/%d - %s" %(len(processes_unkown),nb,','.join(processes_unkown) )
    sys.exit(3)
else :
    print "OK | %d/%d - %s" %(len(processes_ok),nb,','.join(processes_ok) )
    sys.exit(0)

